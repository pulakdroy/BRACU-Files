#Sorting Algorithm 
"""

1. Bubble sort: Best case - O(n)
                  Worst case - O(n^2)
"""                  

def bubblesort(arr):

    for i in range(len(arr)-1):
        for j in range(len(arr)-i-1):
            if arr[j] > arr[j+1]:
                arr[j],arr[j+1] = arr[j+1],arr[j]

    return arr 


"""
2. Selection sort: All case - O(n^2)

"""
def selectionsort(arr):

    for i in range(len(arr)):
        min = i
        for j in range(i+1,len(arr)):
            if arr[j] < arr[min]:
                min = j

        arr[i],arr[min] = arr[min],arr[i]
    
    return arr

"""
3. Insertion sort: Best case - O(n)
                   Worst case - O(n^2)
"""
def insertsort(arr):

    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1

        while j>=0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1

        arr[j+1] = key

    return arr

"""
4. Merge sort: O(nlogn)
"""
def mergesort(arr):

    if len(arr) <= 1:
        return arr
    
    mid  = len(arr)//2 
    left_arr = arr[:mid]
    right_arr = arr[mid:]


    left_arr = mergesort(left_arr)
    right_arr = mergesort(right_arr)

    return merge(left_arr,right_arr)

def merge(left,right):
    merged = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            

    merged += left[i:]
    merged += right[j:]

    return merged 


"""
5. Quick sort: Best case - O(nlogn)
               Worst case - O(n^2)
"""
def quicksort(arr):

    if len(arr) <= 1:
        return arr 
    
    pivot = arr[0]
    smaller = []
    bigger = []

    for i in arr[1:]:
        if i <= pivot:
            smaller.append(i)
        
        else:
            bigger.append(i)

    smaller = quicksort(smaller)
    bigger = quicksort(bigger)

    return smaller + [pivot] + bigger 